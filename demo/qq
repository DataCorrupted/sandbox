STRACE(1)                             General Commands Manual                             STRACE(1)



NNAAMMEE
       strace - trace system calls and signals

SSYYNNOOPPSSIISS
       ssttrraaccee  [--CCddffffhhiiqqrrttttttTTvvVVxxxxyy]  [--II_n]  [--bb_e_x_e_c_v_e] [--ee_e_x_p_r]...  [--aa_c_o_l_u_m_n] [--oo_f_i_l_e] [--ss_s_t_r_s_i_z_e]
       [--PP_p_a_t_h]... --pp_p_i_d... / [--DD] [--EE_v_a_r[=_v_a_l]]... [--uu_u_s_e_r_n_a_m_e] _c_o_m_m_a_n_d [_a_r_g_s]

       ssttrraaccee  --cc[ddff]  [--II_n]  [--bb_e_x_e_c_v_e]  [--ee_e_x_p_r]...   [--OO_o_v_e_r_h_e_a_d]  [--SS_s_o_r_t_b_y]  --pp_p_i_d...  /  [--DD]
       [--EE_v_a_r[=_v_a_l]]... [--uu_u_s_e_r_n_a_m_e] _c_o_m_m_a_n_d [_a_r_g_s]

DDEESSCCRRIIPPTTIIOONN
       In  the  simplest  case ssttrraaccee runs the specified _c_o_m_m_a_n_d until it exits.  It intercepts and
       records the system calls which are called by a process and the signals which are received by
       a  process.  The name of each system call, its arguments and its return value are printed on
       standard error or to the file specified with the --oo option.

       ssttrraaccee is a useful diagnostic, instructional, and debugging  tool.   System  administrators,
       diagnosticians  and  trouble-shooters will find it invaluable for solving problems with pro‐
       grams for which the source is not readily available since they do not need to be  recompiled
       in  order  to  trace  them.  Students, hackers and the overly-curious will find that a great
       deal can be learned about a system and its system calls by tracing even  ordinary  programs.
       And  programmers will find that since system calls and signals are events that happen at the
       user/kernel interface, a close examination of this boundary is very useful  for  bug  isola‐
       tion, sanity checking and attempting to capture race conditions.

       Each line in the trace contains the system call name, followed by its arguments in parenthe‐
       ses and its return value.  An example from stracing the command ``cat /dev/null'' is:

       open("/dev/null", O_RDONLY) = 3

       Errors (typically a return value of -1) have the errno symbol and error string appended.

       open("/foo/bar", O_RDONLY) = -1 ENOENT (No such file or directory)

       Signals are printed as a signal symbol and a signal string.  An excerpt  from  stracing  and
       interrupting the command ``sleep 666'' is:

       sigsuspend([] <unfinished ...>
       --- SIGINT (Interrupt) ---
       +++ killed by SIGINT +++

       If  a system call is being executed and meanwhile another one is being called from a differ‐
       ent thread/process then ssttrraaccee will try to preserve the order of those events and  mark  the
       ongoing call as being _u_n_f_i_n_i_s_h_e_d.  When the call returns it will be marked as _r_e_s_u_m_e_d.

       [pid 28772] select(4, [3], NULL, NULL, NULL <unfinished ...>
       [pid 28779] clock_gettime(CLOCK_REALTIME, {1130322148, 939977000}) = 0
       [pid 28772] <... select resumed> )      = 1 (in [3])

       Interruption of a (restartable) system call by a signal delivery is processed differently as
       kernel terminates the system call and also arranges its immediate reexecution after the sig‐
       nal handler completes.

       read(0, 0x7ffff72cf5cf, 1)              = ? ERESTARTSYS (To be restarted)
       --- SIGALRM (Alarm clock) @ 0 (0) ---
       rt_sigreturn(0xe)                       = 0
       read(0, ""..., 1)                       = 0

       Arguments  are  printed  in symbolic form with a passion.  This example shows the shell per‐
       forming ``>>xyzzy'' output redirection:

       open("xyzzy", O_WRONLY|O_APPEND|O_CREAT, 0666) = 3

       Here the third argument of open is decoded by breaking down the flag argument into its three
       bitwise-OR  constituents  and  printing  the mode value in octal by tradition.  Where tradi‐
       tional or native usage differs from ANSI or POSIX, the latter forms are preferred.  In  some
       cases, ssttrraaccee output has proven to be more readable than the source.

       Structure  pointers  are  dereferenced and the members are displayed as appropriate.  In all
       cases arguments are formatted in the most C-like fashion possible.  For example, the essence
       of the command ``ls -l /dev/null'' is captured as:

       lstat("/dev/null", {st_mode=S_IFCHR|0666, st_rdev=makedev(1, 3), ...}) = 0

       Notice  how the `struct stat' argument is dereferenced and how each member is displayed sym‐
       bolically.  In particular, observe how the st_mode member is carefully decoded into  a  bit‐
       wise-OR of symbolic and numeric values.  Also notice in this example that the first argument
       to lstat is an input to the system call and the second argument is an output.  Since  output
       arguments  are  not  modified if the system call fails, arguments may not always be derefer‐
       enced.  For example, retrying the ``ls -l'' example with a non-existent  file  produces  the
       following line:

       lstat("/foo/bar", 0xb004) = -1 ENOENT (No such file or directory)

       In this case the porch light is on but nobody is home.

       Character  pointers  are  dereferenced and printed as C strings.  Non-printing characters in
       strings are normally represented by ordinary C escape codes.  Only the first _s_t_r_s_i_z_e (32  by
       default)  bytes  of  strings are printed; longer strings have an ellipsis appended following
       the closing quote.  Here is a line from ``ls -l'' where  the  ggeettppwwuuiidd  library  routine  is
       reading the password file:

       read(3, "root::0:0:System Administrator:/"..., 1024) = 422

       While  structures  are  annotated using curly braces, simple pointers and arrays are printed
       using square brackets with commas separating elements.  Here is an example from the  command
       ``id'' on a system with supplementary group ids:

       getgroups(32, [100, 0]) = 2

       On  the other hand, bit-sets are also shown using square brackets but set elements are sepa‐
       rated only by a space.  Here is the shell preparing to execute an external command:

       sigprocmask(SIG_BLOCK, [CHLD TTOU], []) = 0

       Here the second argument is a bit-set of two signals, SIGCHLD and SIGTTOU.   In  some  cases
       the bit-set is so full that printing out the unset elements is more valuable.  In that case,
       the bit-set is prefixed by a tilde like this:

       sigprocmask(SIG_UNBLOCK, ~[], NULL) = 0

       Here the second argument represents the full set of all signals.

OOPPTTIIOONNSS
       --cc          Count time, calls, and errors for each system call and report  a  summary
                   on  program  exit.  On Linux, this attempts to show system time (CPU time
                   spent running in the kernel) independent of wall clock time.   If  --cc  is
                   used  with  --ff  or  --FF (below), only aggregate totals for all traced pro‐
                   cesses are kept.

       --CC          Like --cc but also print regular output while processes are running.

       --DD          Run tracer process as a detached grandchild, not as parent of the tracee.
                   This  reduces the visible effect of ssttrraaccee by keeping the tracee a direct
                   child of the calling process.

       --dd          Show some debugging output of ssttrraaccee itself on the standard error.

       --ff          Trace child processes as they are created by currently  traced  processes
                   as a result of the ffoorrkk(2), vvffoorrkk(2) and cclloonnee(2) system calls. Note that
                   --pp _P_I_D --ff will attach all threads of process PID if it is multi-threaded,
                   not only thread with thread_id = PID.

       --ffff         If  the  --oo _f_i_l_e_n_a_m_e option is in effect, each processes trace is written
                   to _f_i_l_e_n_a_m_e_._p_i_d where pid is the numeric  process  id  of  each  process.
                   This is incompatible with --cc, since no per-process counts are kept.

       --FF          This option is now obsolete and it has the same functionality as --ff.

       --hh          Print the help summary.

       --ii          Print the instruction pointer at the time of the system call.

       --qq          Suppress messages about attaching, detaching etc.  This happens automati‐
                   cally when output is redirected to a file and the command is run directly
                   instead of attaching.

       --qqqq         If given twice, suppress messages about process exit status.

       --rr          Print  a relative timestamp upon entry to each system call.  This records
                   the time difference between the beginning of successive system calls.

       --tt          Prefix each line of the trace with the time of day.

       --tttt         If given twice, the time printed will include the microseconds.

       --tttttt        If given thrice, the time printed will include the microseconds  and  the
                   leading portion will be printed as the number of seconds since the epoch.

       --TT          Show  the  time  spent  in system calls. This records the time difference
                   between the beginning and the end of each system call.

       --vv          Print unabbreviated versions of environment, stat, termios, etc.   calls.
                   These  structures  are  very  common in calls and so the default behavior
                   displays a reasonable subset of structure members.  Use  this  option  to
                   get all of the gory details.

       --VV          Print the version number of ssttrraaccee.

       --xx          Print all non-ASCII strings in hexadecimal string format.

       --xxxx         Print all strings in hexadecimal string format.

       --yy          Print paths associated with file descriptor arguments.

       --aa _c_o_l_u_m_n   Align return values in a specific column (default column 40).

       --bb _s_y_s_c_a_l_l  If  specified syscall is reached, detach from traced process.  Currently,
                   only _e_x_e_c_v_e syscall is supported. This option is useful if  you  want  to
                   trace  multi-threaded process and therefore require -f, but don't want to
                   trace its (potentially very complex) children.

       --ee _e_x_p_r     A qualifying expression which modifies which events to trace  or  how  to
                   trace them.  The format of the expression is:

                             [_q_u_a_l_i_f_i_e_r==][!!]_v_a_l_u_e_1[,,_v_a_l_u_e_2]...

                   where  _q_u_a_l_i_f_i_e_r  is one of ttrraaccee, aabbbbrreevv, vveerrbboossee, rraaww, ssiiggnnaall, rreeaadd, or
                   wwrriittee and _v_a_l_u_e is a qualifier-dependent symbol or number.   The  default
                   qualifier is ttrraaccee.  Using an exclamation mark negates the set of values.
                   For example, --ee ooppeenn means literally --ee ttrraaccee=ooppeenn which  in  turn  means
                   trace  only  the  ooppeenn system call.  By contrast, --ee ttrraaccee=!ooppeenn means to
                   trace every system call except ooppeenn.  In addition, the special values aallll
                   and nnoonnee have the obvious meanings.

                   Note  that  some  shells  use the exclamation point for history expansion
                   even inside quoted arguments.  If so, you  must  escape  the  exclamation
                   point with a backslash.

       --ee ttrraaccee=_s_e_t
                   Trace  only  the  specified set of system calls.  The --cc option is useful
                   for determining which system calls might be useful to trace.   For  exam‐
                   ple,  ttrraaccee=ooppeenn,,cclloossee,,rreeaadd,,wwrriittee  means  to only trace those four system
                   calls.  Be careful when making inferences about the user/kernel  boundary
                   if  only  a  subset  of system calls are being monitored.  The default is
                   ttrraaccee=aallll.

       --ee ttrraaccee=ffiillee
                   Trace all system calls which take a file name as an  argument.   You  can
                   think  of this as an abbreviation for --ee ttrraaccee=ooppeenn,ssttaatt,cchhmmoodd,uunnlliinnkk,...
                   which is useful to seeing what files the process  is  referencing.   Fur‐
                   thermore,  using the abbreviation will ensure that you don't accidentally
                   forget to include a call like llssttaatt in the list.  Betchya  woulda  forgot
                   that one.

       --ee ttrraaccee=pprroocceessss
                   Trace  all system calls which involve process management.  This is useful
                   for watching the fork, wait, and exec steps of a process.

       --ee ttrraaccee=nneettwwoorrkk
                   Trace all the network related system calls.

       --ee ttrraaccee=ssiiggnnaall
                   Trace all signal related system calls.

       --ee ttrraaccee=iippcc
                   Trace all IPC related system calls.

       --ee ttrraaccee=ddeesscc
                   Trace all file descriptor related system calls.

       --ee ttrraaccee=mmeemmoorryy
                   Trace all memory mapping related system calls.

       --ee aabbbbrreevv=_s_e_t
                   Abbreviate the output from printing each member of large structures.  The
                   default is aabbbbrreevv=aallll.  The --vv option has the effect of aabbbbrreevv=nnoonnee.

       --ee vveerrbboossee=_s_e_t
                   Dereference  structures  for  the  specified  set  of  system calls.  The
                   default is vveerrbboossee=aallll.

       --ee rraaww=_s_e_t  Print raw, undecoded arguments for the specified  set  of  system  calls.
                   This  option  has  the  effect  of causing all arguments to be printed in
                   hexadecimal.  This is mostly useful if you don't trust  the  decoding  or
                   you need to know the actual numeric value of an argument.

       --ee ssiiggnnaall=_s_e_t
                   Trace  only  the specified subset of signals.  The default is ssiiggnnaall=aallll.
                   For example, ssiiggnnaall ==!! SSIIGGIIOO (or ssiiggnnaall=!iioo) causes SIGIO signals not  to
                   be traced.

       --ee rreeaadd=_s_e_t Perform  a full hexadecimal and ASCII dump of all the data read from file
                   descriptors listed in the specified set.  For example, to see  all  input
                   activity  on file descriptors _3 and _5 use --ee rreeaadd=_3,_5.  Note that this is
                   independent from the normal tracing of the rreeaadd(2) system call  which  is
                   controlled by the option --ee ttrraaccee=rreeaadd.

       --ee wwrriittee=_s_e_t
                   Perform a full hexadecimal and ASCII dump of all the data written to file
                   descriptors listed in the specified set.  For example, to see all  output
                   activity on file descriptors _3 and _5 use --ee wwrriittee=_3,_5.  Note that this is
                   independent from the normal tracing of the wwrriittee(2) system call which  is
                   controlled by the option --ee ttrraaccee=wwrriittee.

       --II _i_n_t_e_r_r_u_p_t_i_b_l_e
                   When  strace  can be interrupted by signals (such as pressing ^C).  1: no
                   signals are blocked; 2: fatal signals are blocked while decoding  syscall
                   (default);  3:  fatal  signals  are  always  blocked (default if '-o FILE
                   PROG'); 4: fatal signals and SIGTSTP (^Z) are always blocked  (useful  to
                   make strace -o FILE PROG not stop on ^Z).

       --oo _f_i_l_e_n_a_m_e Write  the  trace output to the file _f_i_l_e_n_a_m_e rather than to stderr.  Use
                   _f_i_l_e_n_a_m_e_._p_i_d if --ffff is used.  If the argument begins with `|' or with `!'
                   then  the  rest of the argument is treated as a command and all output is
                   piped to it.  This is convenient for piping the  debugging  output  to  a
                   program without affecting the redirections of executed programs.

       --OO _o_v_e_r_h_e_a_d Set the overhead for tracing system calls to _o_v_e_r_h_e_a_d microseconds.  This
                   is useful for overriding the default heuristic for guessing how much time
                   is  spent in mere measuring when timing system calls using the --cc option.
                   The accuracy of the heuristic can be gauged by timing a given program run
                   without tracing (using ttiimmee(1)) and comparing the accumulated system call
                   time to the total produced using --cc.

       --pp _p_i_d      Attach to the process with the process ID _p_i_d  and  begin  tracing.   The
                   trace may be terminated at any time by a keyboard interrupt signal (CTRL-
                   C).  ssttrraaccee will respond by detaching itself from the traced  process(es)
                   leaving  it  (them) to continue running.  Multiple --pp options can be used
                   to attach to many processes.  -p "`pidof PROG`" syntax is supported.

       --PP _p_a_t_h     Trace only system calls accessing _p_a_t_h_.  Multiple --PP options can be  used
                   to specify several paths.

       --ss _s_t_r_s_i_z_e  Specify  the maximum string size to print (the default is 32).  Note that
                   filenames are not considered strings and are always printed in full.

       --SS _s_o_r_t_b_y   Sort the output of the histogram printed by the --cc option by  the  speci‐
                   fied criterion.  Legal values are ttiimmee, ccaallllss, nnaammee, and nnootthhiinngg (default
                   is ttiimmee).

       --uu _u_s_e_r_n_a_m_e Run command with the user ID, group ID, and supplementary groups of _u_s_e_r_‐
                   _n_a_m_e.   This  option  is only useful when running as root and enables the
                   correct execution of setuid and/or setgid binaries.  Unless  this  option
                   is  used setuid and setgid programs are executed without effective privi‐
                   leges.

       --EE _v_a_r=_v_a_l  Run command with _v_a_r=_v_a_l in its list of environment variables.

       --EE _v_a_r      Remove _v_a_r from the inherited list of environment variables before  pass‐
                   ing it on to the command.

DDIIAAGGNNOOSSTTIICCSS
       When _c_o_m_m_a_n_d exits, ssttrraaccee exits with the same exit status.  If _c_o_m_m_a_n_d is terminated
       by a signal, ssttrraaccee terminates itself with the same signal, so  that  ssttrraaccee  can  be
       used as a wrapper process transparent to the invoking parent process.

       When using --pp, the exit status of ssttrraaccee is zero unless there was an unexpected error
       in doing the tracing.

SSEETTUUIIDD IINNSSTTAALLLLAATTIIOONN
       If ssttrraaccee is installed setuid to root then the invoking user will be able  to  attach
       to  and  trace  processes  owned by any user.  In addition setuid and setgid programs
       will be executed and traced with the correct effective privileges.  Since only  users
       trusted with full root privileges should be allowed to do these things, it only makes
       sense to install ssttrraaccee as setuid to root when the  users  who  can  execute  it  are
       restricted  to  those  users  who  have  this  trust.  For example, it makes sense to
       install a special version of ssttrraaccee with mode `rwsr-xr--', user rroooott and group ttrraaccee,
       where  members  of  the  ttrraaccee  group are trusted users.  If you do use this feature,
       please remember to install a non-setuid version of ssttrraaccee for ordinary lusers to use.

SSEEEE AALLSSOO
       llttrraaccee(1), ttiimmee(1), ppttrraaccee(2), pprroocc(5)

NNOOTTEESS
       It is a pity that so much tracing clutter is produced  by  systems  employing  shared
       libraries.

       It  is  instructive to think about system call inputs and outputs as data-flow across
       the user/kernel boundary.  Because  user-space  and  kernel-space  are  separate  and
       address-protected,  it  is  sometimes  possible  to  make  deductive inferences about
       process behavior using inputs and outputs as propositions.

       In some cases, a system call will differ from the documented behavior or have a  dif‐
       ferent  name.   For example, on System V-derived systems the true ttiimmee(2) system call
       does not take an argument and the ssttaatt function is called xxssttaatt and  takes  an  extra
       leading  argument.   These discrepancies are normal but idiosyncratic characteristics
       of the system call interface and are accounted for by C library wrapper functions.

       On some platforms a process that has a system call trace applied to it  with  the  --pp
       option  will  receive a SSIIGGSSTTOOPP.  This signal may interrupt a system call that is not
       restartable.  This may have an unpredictable effect on the  process  if  the  process
       takes no action to restart the system call.

BBUUGGSS
       Programs that use the _s_e_t_u_i_d bit do not have effective user ID privileges while being
       traced.

       A traced process runs slowly.

       Traced processes which are descended from _c_o_m_m_a_n_d may be left running after an inter‐
       rupt signal (CTRL-C).

       The --ii option is weakly supported.

HHIISSTTOORRYY
       ssttrraaccee  The original ssttrraaccee was written by Paul Kranenburg for SunOS and was inspired
       by its trace utility.  The SunOS version of ssttrraaccee was ported to Linux  and  enhanced
       by  Branko  Lankester,  who  also  wrote  the Linux kernel support.  Even though Paul
       released ssttrraaccee 2.5 in 1992, Branko's work was based on  Paul's  ssttrraaccee  1.5  release
       from  1991.  In 1993, Rick Sladkey merged ssttrraaccee 2.5 for SunOS and the second release
       of ssttrraaccee for Linux, added many of the features of ttrruussss(1) from SVR4,  and  produced
       an  ssttrraaccee  that  worked  on  both platforms.  In 1994 Rick ported ssttrraaccee to SVR4 and
       Solaris and wrote the automatic configuration support.  In 1995 he ported  ssttrraaccee  to
       Irix and tired of writing about himself in the third person.

PPRROOBBLLEEMMSS
       Problems   with   ssttrraaccee   should   be   reported  to  the  ssttrraaccee  mailing  list  at
       <strace-devel@lists.sourceforge.net>.



                                             2010-03-30                                   STRACE(1)
